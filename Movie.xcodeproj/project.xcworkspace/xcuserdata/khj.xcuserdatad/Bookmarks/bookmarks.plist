<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>top-level-items</key>
	<array>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>134</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>133</string>
					<key>Timestamp</key>
					<string>725435756.754887</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Movie/Views/DetailsView.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        // title
</string>
				<key>leading</key>
				<string>    @ViewBuilder
    func movieInformation(movie: Movie) -&gt; some View {
</string>
				<key>trailing</key>
				<string>        Text(movie.title)
            .frame(maxWidth: .infinity, alignment: .leading)
            .font(.title.bold())
</string>
			</dict>
			<key>title</key>
			<string>내부 변수 사용하고 있어서 변수 뷰로 만들어도 된다.</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>21</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>20</string>
					<key>Timestamp</key>
					<string>723802175.246121</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Movie/ViewModels/TasteMatchViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>            let favoritesMovies = try JSONDecoder().decode([Movie].self, from: data)
</string>
				<key>leading</key>
				<string>            let savePath = FileManager.documentsDirectory.appendingPathComponent(user?.userId ?? "" )
            let data = try Data(contentsOf: savePath)
</string>
				<key>trailing</key>
				<string>            return Double(favoritesMovies.count)
        } catch {
            Logger.fileManager.error("\(error)")
</string>
			</dict>
			<key>title</key>
			<string>FileManager -&gt; Decoder 많아서 extension으로 만들어도 괜찮을 듯</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>35</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>34</string>
					<key>Timestamp</key>
					<string>725435728.460385</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Movie/Views/Authentication/SignInEmailView.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>                            try await signInEmailViewModel.signIn()
</string>
				<key>leading</key>
				<string>                    Task {
                        do {
</string>
				<key>trailing</key>
				<string>                            guard let user = UserDefaults.standard.loadUser(DBUser.self, forKey: .user) else {
                                Logger.auth.error("DEBUG: Failed to signUp with Email")
                                return
</string>
			</dict>
			<key>title</key>
			<string>차라리 이 함수에서 DBUser객체를 내뱉으면 저장된 걸 다시 불러올 필요가 없겠다.</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
	</array>
</dict>
</plist>
